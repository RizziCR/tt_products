plugin.tt_products {
    # cat=plugin.products/file; type=file[html,htm,tmpl,txt]; label= Template File: This is a simple textfile where each part of the shopping basket is defined with HTML-code. To see an example with explanations, take a look at EXT:tt_products/pi/products_template.tmpl which is the default.
  file.templateFile = EXT:tt_products/pi/products_template.tmpl
    # cat=plugin.products/file; type=file[IMAGE_EXT]; label= Alternative Image: This image is used if there is no image present for the product
  file.noImageAvailable =

    # cat=plugin.products/typo; type=wrap; label= Wrap 1: This wrap is used in the template-file.
  wrap1 = <font face="verdana" size=2 color=black> | </font>
    # cat=plugin.products/typo; type=wrap; label= Wrap 2: This wrap is used in the template-file.
  wrap2 = <font face="verdana" size=1 color=black> | </font>

    # cat=plugin.products/color; type=color; label= Color 1: This bgcolor is used in the template-file.
  color1 = #cccccc
    # cat=plugin.products/color; type=color; label= Color 2: This bgcolor is used in the template-file.
  color2 = #999999
    # cat=plugin.products/color; type=color; label= Color 3: This bgcolor is used in the template-file.
  color3 = #333333

    # cat=plugin.products//; type=boolean; label= Click Enlarge, Single display: If this option is set, users can click the image of a product and it'll pop-up in a separate window at a larger size.
  clickEnlarge = 1
    # cat=plugin.products//; type=boolean; label= Click Enlarge, List display: As above, but for the images in the product-lists and search-results
  clickEnlarge_list = 1
    # cat=plugin.products//; type=boolean; label= Click Enlarge, Basket display: As above, but for the images in the basket
  clickEnlarge_basket = 1

    # cat=plugin.products//; type=boolean; label= Display Category Header in list: If this option is set, the category headers (page titles) will automatically be displayed in the product lists. This is not always convenient because you might have chosen a header-title for the "list" content element.
  displayListCatHeader = 1
    # cat=plugin.products//; type=boolean; label= Display Category Header in basket: If this option is set, the category headers (page titles) will automatically be displayed in the basket lists.
  displayBasketCatHeader = 0

    # cat=plugin.products//; type=int+; label= Max items displayed: The maximum number of items displayed on one page. 
  limit = 50

    # cat=plugin.products/dims; type=int+; label= Max image width, single display: The maximum width in pixels of an image when displayed with a single product.
  maxW_single = 200
    # cat=plugin.products/dims; type=int+; label= Max image width, list display: The maximum width in pixels of an image when displayed in lists and searchresults.
  maxW_list = 50
  maxH_list = 100
    # cat=plugin.products/dims; type=int+; label= Max image width, basket display: The maximum width in pixels of an image when displayed in the shopping-basket.
  maxW_basket = 100

    # cat=plugin.products//; type=int+; label=PID for single item display: If you want a certain page to be used for display of item details, please enter the PID (page-uid) here.
  PIDitemDisplay =
    # cat=plugin.products//; type=int+; label=PID for search page: If you want all product searches to go to a specific page, enter the PID it here! NOTE: If you set this PID, all searchqueries will (must) be handled with a list content element with the code "search" on that page.
  PIDsearch =
    # cat=plugin.products//; type=int+; label=PID for basket page: If you want every change in the number of items anywhere to go to a specific page (eg. the shopping basket page), enter the PID here.
  PIDbasket =
    # cat=plugin.products//; type=int+; label=PID for store root: This is the PID of the rootPage of the store. If not set the store will operate over all pages from the root of the site. But if the site has many pages, performance may improve
  PIDstoreRoot = 
    # cat=plugin.products//; type=int+; label=PID for the memo page: Needed if you want to use the memo page
  PIDmemo = 

    # cat=plugin.products//; type=small; label=TAX percentage: Type= Double (means, "use . as decimal point")
  TAXpercentage = 25

    # TAX included in database prices?
  TAXincluded = 1
    # Price decimals
  priceDec = 2

    # cat=plugin.products//; type=small; label=Price decimal point
  priceDecPoint = .
    # cat=plugin.products//; type=small; label=Price Thousand point
  priceThousandPoint = 

    # cat=plugin.products//; type=boolean; label=Use Price Tag: Print a graphical price tag instead of the normal text field
  usePriceTag = 1
    # cat=plugin.products//; type=text; label=Message displayed at bulkily items
  bulkilyWarning = <p><b>Warning! This article needs special transport.</b></p>
    # cat=plugin.products//; type=int+; label=Additional cost for bulkily items
  bulkilyAddition = 25
    # cat=plugin.products//; type=text; label=Special preparation: Message displayed at items marked as special preparation
  specialPreparation = Special preparation possible! <A HREF="?id=999&tt_products=###PRODUCT_ID###">Order here</A>.

    # cat=plugin.products//; type=int+; label=Max note length: Max. length of note text in list view
  max_note_length = 100

    # cat=plugin.products//; type=boolean; label=Create Users: Create an user account for each new customer
  createUsers = 0
    # cat=plugin.products//; type=int+; label=User Sysfolder PID: PID of the sysfolder for the new users
  PIDuserFolder = 116
    # cat=plugin.products//; type=int+; label=Group of customers
  memberOfGroup = 1

    # cat=plugin.products//; type=int+; label=PID of AGB page: PID of the page with the AGB
  PIDagb = 0
    # cat=plugin.products//; type=small; label=Target of AGB page: Target for the AGB page
  agbtarget = _blank

    # cat=plugin.products/file; type=file[html,htm,pdf,doc,txt]; label= AGB Attachment File: This file is attached to the order confirmation mail
  AGBattachment = fileadmin/agb.pdf

    # cat=plugin.products//; type=boolean; label=Order CSV generation: Generate a CSV file for each order
  generateCSV = 0
    # cat=plugin.products//; type=text; label=Order CSV folder: Destination directory for CSV files generated by orders; Important: Enter a directory, that is NOT accessible via web!
  CSVdestination = ../csvorders/
    # cat=plugin.products//; type=text; label=Order CSV export fields: Product database fields to export (Comma seperated)
  CSVfields = tstamp,title,price,price2,itemnumber,category,inStock,tax,weight,bulkily,offer,highlight,directcost,subtitle
    # cat=plugin.products//; type=boolean; label=Choose your CSV format: Write all additional information in one line behind the first ordered product. This is good if you want to import this files somewhere. If you not check this, the CSV is formatted for best view in Excel for example
  CSVinOneLine = 0

    # cat=plugin.products//; type=text; label=Always inStock: The stock will never get reduced.
  alwaysInStock = 1
    # cat=plugin.products//; type=text; label=Always inStock message: Message is displayed if inStock <= -1 (means always inStock)
  alwaysInStockMessage = Auf Lager
    # cat=plugin.products//; type=text; label=Unit for pieces
  inStockPieces = Stück

    # cat=plugin.products//; type=text; label=New Item Days: How many days list new items in LISTNEWITEMS
  newItemDays = 7

    # cat=plugin.products//; type=int+; label=Substitute page title: If you set this to 1, the product title will be showed as page title in single view. If you set this to 2, the product subtitle will be displayed
  substitutePagetitle = 1
}

